(self.webpackChunkpyrsia=self.webpackChunkpyrsia||[]).push([[7674],{20467:function(e,a,t){"use strict";t.r(a),t.d(a,{assets:function(){return p},contentTitle:function(){return c},default:function(){return b},frontMatter:function(){return s},metadata:function(){return d},toc:function(){return u}});var n=t(87462),i=t(63366),r=(t(67294),t(3905)),o=t(8209),l=["components"],s={custom_edit_url:"https://github.com/pyrsia/pyrsia/blob/main/docs/developers/build_from_source_docker.md",sidebar_position:1},c="Pyrsia demo: build Docker images from source",d={unversionedId:"developers/build_from_source_docker",id:"developers/build_from_source_docker",title:"Pyrsia demo: build Docker images from source",description:"Warning: This tutorial is aimed at developers actively contributing to the",source:"@site/docs/developers/build_from_source_docker.md",sourceDirName:"developers",slug:"/developers/build_from_source_docker",permalink:"/docs/developers/build_from_source_docker",draft:!1,editUrl:"https://github.com/pyrsia/pyrsia/blob/main/docs/developers/build_from_source_docker.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{custom_edit_url:"https://github.com/pyrsia/pyrsia/blob/main/docs/developers/build_from_source_docker.md",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Pyrsia architecture and use cases",permalink:"/docs/developers/pyrsia-architecture-and-use-cases"},next:{title:"Pyrsia demo: build Maven images from source",permalink:"/docs/developers/build_from_source_maven"}},p={},u=[{value:"Compile Pyrsia",id:"compile-pyrsia",level:2},{value:"Run Pyrsia node A",id:"run-pyrsia-node-a",level:2},{value:"Run build pipeline prototype",id:"run-build-pipeline-prototype",level:2},{value:"Authorize node A as a build node",id:"authorize-node-a-as-a-build-node",level:2},{value:"Run Pyrsia node B",id:"run-pyrsia-node-b",level:2},{value:"Trigger a build from source for a given artifact",id:"trigger-a-build-from-source-for-a-given-artifact",level:2},{value:"Wait for the build to finish in the build pipeline",id:"wait-for-the-build-to-finish-in-the-build-pipeline",level:2},{value:"Try to reach consensus with the other authorized nodes",id:"try-to-reach-consensus-with-the-other-authorized-nodes",level:2},{value:"Create a transparency log about the artifact publication",id:"create-a-transparency-log-about-the-artifact-publication",level:2},{value:"Publish the artifact on the p2p network",id:"publish-the-artifact-on-the-p2p-network",level:2},{value:"Use Pyrsia with Docker pull",id:"use-pyrsia-with-docker-pull",level:2},{value:"Configure Docker desktop to use node B as registry mirror",id:"configure-docker-desktop-to-use-node-b-as-registry-mirror",level:3},{value:"Pull <code>alpine</code> docker image",id:"pull-alpine-docker-image",level:2},{value:"Inspect the transparency logs",id:"inspect-the-transparency-logs",level:2}],h={toc:u};function b(e){var a=e.components,t=(0,i.Z)(e,l);return(0,r.kt)("wrapper",(0,n.Z)({},h,t,{components:a,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"pyrsia-demo-build-docker-images-from-source"},"Pyrsia demo: build Docker images from source"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},(0,r.kt)("strong",{parentName:"p"},"Warning:")," This tutorial is aimed at developers actively contributing to the\nPyrsia codebase. If you simply want to use Pyrsia, please have a look at ",(0,r.kt)("a",{parentName:"p",href:"/docs/tutorials/docker"},"Configure Docker to use Pyrsia"))),(0,r.kt)("p",null,"This tutorial describes how to setup two Pyrsia nodes: one that acts as the authorized\nnode and builds Docker images from source and makes them available in the Pyrsia network,\nand another one that acts as a regular Pyrsia node, retrieving the transparency\nlogs and the Docker image from the Pyrsia network. \\"),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"Note: in the current prototype, the build pipeline does not actually build the\nimage, but downloads them from Docker Hub instead.")),(0,r.kt)("p",null,"The following scenario will be used:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"Setup an 'authorized' node: node A"),(0,r.kt)("li",{parentName:"ul"},"Setup a regular node: node B"),(0,r.kt)("li",{parentName:"ul"},"Set up a build pipeline (prototype) for node A and configure it to use it."),(0,r.kt)("li",{parentName:"ul"},"Trigger a build from source for a given artifact"),(0,r.kt)("li",{parentName:"ul"},"Wait for the build to finish in the build pipeline"),(0,r.kt)("li",{parentName:"ul"},"Try to reach consensus with the other authorized nodes, which have to run the\nsame build and verify they produce the same build result. (There's only one\nauthorized node, so this is 'light' consensus for now)"),(0,r.kt)("li",{parentName:"ul"},"Create a transparency log about the artifact publication"),(0,r.kt)("li",{parentName:"ul"},"Publish the artifact on the p2p network"),(0,r.kt)("li",{parentName:"ul"},"Inspect the transparency log on any node"),(0,r.kt)("li",{parentName:"ul"},"Use docker pull using node B to pull the docker image from the Pyrsia network")),(0,r.kt)(o.G,{chart:"sequenceDiagram\n    participant User\n    participant nodeB as Node B\n    participant nodeA as Node A\n    participant Build pipeline\n    User->>nodeA: Trigger build\n    nodeA->>Build pipeline: Request build\n    nodeA->>nodeA: Wait for build to finish\n    nodeA->>Build pipeline: Fetch build result\n    nodeA->>nodeA: Reach consensus and<br>create transparency log\n    nodeA->>nodeB: Distribute new logs\n    User->>nodeB: docker pull\n    nodeB->>nodeB: Check transparency logs\n    nodeB->>nodeA: Fetch artifacts\n    nodeB->>User: return docker image",mdxType:"Mermaid"}),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"/docs/developers/pyrsia-architecture-and-use-cases"},"architecture and use-cases"),"\ndocument for more information."),(0,r.kt)("h2",{id:"compile-pyrsia"},"Compile Pyrsia"),(0,r.kt)("p",null,"Download a fresh copy of the codebase by cloning the repo or updating to the\nHEAD of ",(0,r.kt)("inlineCode",{parentName:"p"},"main"),"."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"git clone https://github.com/pyrsia/pyrsia.git\n")),(0,r.kt)("p",null,"Let's call this folder ",(0,r.kt)("inlineCode",{parentName:"p"},"PYRSIA_HOME"),". We will refer to this\nname in the following steps."),(0,r.kt)("p",null,"Build binaries by running:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cd $PYRSIA_HOME\ncargo build --workspace\n")),(0,r.kt)("p",null,"See the ",(0,r.kt)("a",{parentName:"p",href:"/docs/community/get_involved/local_dev_setup"},"Development Environment"),"\ndocument for more information."),(0,r.kt)("h2",{id:"run-pyrsia-node-a"},"Run Pyrsia node A"),(0,r.kt)("p",null,"Now we will set the following env vars and start a pyrsia node:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"RUST_LOG: to make sure we can see all the debug logs"),(0,r.kt)("li",{parentName:"ul"},"DEV_MODE: to make sure all non-existing directories are created on-the-fly"),(0,r.kt)("li",{parentName:"ul"},"PYRSIA_ARTIFACT_PATH: pointing to a directory to store artifacts. optionally\nremove this directory prior to starting Pyrsia if you want to start from an\nempty state.")),(0,r.kt)("p",null,"For the purpose of this demo, let's create temporary directories to clearly\nseparate our two nodes:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"mkdir nodeA\ncp target/debug/pyrsia_node nodeA\ncd nodeA\n")),(0,r.kt)("p",null,"And then run node A in listen-only and init mode, listening on a non-default port (because\nwe will run node B with default settings)."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"RUST_LOG=pyrsia=debug DEV_MODE=on \\\n./pyrsia_node --pipeline-service-endpoint http://localhost:8080 -p 7889 --listen-only --init-blockchain\n")),(0,r.kt)("p",null,"Watch out for this kind of log:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'INFO  pyrsia::network::event_loop > Local node is listening on "/ip4/127.0.0.1/tcp/56662/p2p/12D3KooWBgWeXNT1EKXo2omRhZVmkbvPgzZ5BcGjTfgKr586BSAn"\n')),(0,r.kt)("p",null,"It contains the p2p multiaddress of node A, which we will need when starting node\nB later in this tutorial."),(0,r.kt)("p",null,"As you can see, we specified the ",(0,r.kt)("inlineCode",{parentName:"p"},"--pipeline-service-endpoint")," argument to point\nto ",(0,r.kt)("inlineCode",{parentName:"p"},"http://localhost:8080"),", which is where we will run our build pipeline prototype\n(see below). In a production setup, the build pipeline needs to run on its\nown isolated infrastructure."),(0,r.kt)("h2",{id:"run-build-pipeline-prototype"},"Run build pipeline prototype"),(0,r.kt)("p",null,"In this demo, we use a build pipeline prototype. Eventually, Pyrsia will use\nindustry-standard build pipeline solutions. Integration with such solutions is\ncurrently being investigated."),(0,r.kt)("p",null,"The most important features of the build pipeline are:"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"it runs completely separate from the Pyrsia node"),(0,r.kt)("li",{parentName:"ul"},"it exposes an interface so Pyrsia can start a build"),(0,r.kt)("li",{parentName:"ul"},"it exposes an interface so Pyrsia can download the build output")),(0,r.kt)("p",null,"The current build pipeline prototype supports Maven and Docker builds."),(0,r.kt)("p",null,"Download or clone the ",(0,r.kt)("a",{parentName:"p",href:"https://github.com/tiainen/pyrsia_build_pipeline_prototype"},"prototype repo"),"\nand run as follows (",(0,r.kt)("inlineCode",{parentName:"p"},"jq")," must be installed locally before):"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cd pyrsia_build_pipeline_prototype\nRUST_LOG=debug cargo run\n")),(0,r.kt)("p",null,"By default, this prototype listens on http port 8080. If you run it on a different\nhost or port, make sure to specify its location when starting the Pyrsia node\nwith ",(0,r.kt)("inlineCode",{parentName:"p"},"--pipeline-service-endpoint")," (see above)."),(0,r.kt)("p",null,"You will see the following output indicating that the build pipeline is ready\nfor use"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"   Finished dev [unoptimized + debuginfo] target(s) in 1m 07s\n     Running `target/debug/pyrsia_build`\n INFO  actix_server::builder > Starting 8 workers\n INFO  actix_server::server  > Tokio runtime found; starting in existing Tokio runtime\n")),(0,r.kt)("h2",{id:"authorize-node-a-as-a-build-node"},"Authorize node A as a build node"),(0,r.kt)("p",null,"We will use the Pyrsia CLI to authorize node A as a build node.\nSince node A is running on port 7889, we will have to edit the Pyrsia CLI config:"),(0,r.kt)("p",null,"In a new terminal, while the Pyrsia nodes and the build pipeline prototype are\nrunning, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cd $PYRSIA_HOME/target/debug\n./pyrsia config -e\n")),(0,r.kt)("p",null,"And enter the correct values or accept the default:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Enter host: [localhost]\n\nEnter port: [7888]\n7889\nEnter disk space to be allocated to pyrsia(Please enter with units ex: 10 GB): [10 GB]\n\nNode configuration Saved !!\n")),(0,r.kt)("p",null,"Next you'll need to find out the peer id of node A. You can see that in its logs\nor you can query the ",(0,r.kt)("inlineCode",{parentName:"p"},"/status")," endpoint like this: (assuming you have ",(0,r.kt)("inlineCode",{parentName:"p"},"jq")," installed)"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"curl -s http://localhost:7889/status | jq  .peer_id\n")),(0,r.kt)("p",null,"Once you know the peer id, authorize it like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-shell"},"./pyrsia authorize --peer <PEER_ID>\n")),(0,r.kt)("h2",{id:"run-pyrsia-node-b"},"Run Pyrsia node B"),(0,r.kt)("p",null,"Now it's time to run our regular node: node B. Let's create another temporary\ndirectory to clearly separate it from node A."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"mkdir nodeB\ncp target/debug/pyrsia_node nodeB\ncd nodeB\n")),(0,r.kt)("p",null,'And then run node B with default settings and connecting it to the multiaddress\nof node A. This multiaddress can be found in the logs of node A (see section\n"Run Pyrsia node A" above).'),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"RUST_LOG=pyrsia=debug DEV_MODE=on \\\n./pyrsia_node --peer /ip4/127.0.0.1/tcp/56662/p2p/12D3KooWBgWeXNT1EKXo2omRhZVmkbvPgzZ5BcGjTfgKr586BSAn\n")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"Important"),": do not simply copy/paste this command, the multiaddress on your\nlocal system will be different."),(0,r.kt)("p",null,"At this point, we are running a Pyrsia network consisting of two nodes, so\nlet's continue building an artifact and providing it on the network."),(0,r.kt)("h2",{id:"trigger-a-build-from-source-for-a-given-artifact"},"Trigger a build from source for a given artifact"),(0,r.kt)("p",null,"In this section we will trigger a build for ",(0,r.kt)("inlineCode",{parentName:"p"},"alpine:3.16")," on node A."),(0,r.kt)("p",null,"We will use the Pyrsia CLI to trigger a build from source. We can send the build\nrequest to node B, which will relay the request to node A, which is an authorized\nbuild node. Node B, which is running on port 7888, we will have to edit this config\nagain:"),(0,r.kt)("p",null,"In a new terminal, while the Pyrsia nodes and the build pipeline prototype are\nrunning, run:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"cd $PYRSIA_HOME/target/debug\n./pyrsia config -e --port 7888\n")),(0,r.kt)("p",null,"Then trigger the build from source, like this:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"./pyrsia build docker --image alpine:3.16.0\n")),(0,r.kt)("p",null,"The build trigger should return immediately providing a build ID:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"Build request successfully handled. Build with ID c9ca3e57-aa84-4fab-a8be-381ab31e4916 has been started.\n")),(0,r.kt)("h2",{id:"wait-for-the-build-to-finish-in-the-build-pipeline"},"Wait for the build to finish in the build pipeline"),(0,r.kt)("p",null,"In the Pyrsia node logs of node A, you will see that a build has been started and\nthe Pyrsia node is now waiting for its result:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'INFO  pyrsia_registry > 127.0.0.1:50187 "POST /build/docker HTTP/1.1" 200 "-" "-" 42.826041ms\nDEBUG pyrsia::build_service::service > Updated build info: BuildInfo { id: "c9ca3e57-aa84-4fab-a8be-381ab31e4916", status: Running }\n')),(0,r.kt)("p",null,"In the build pipeline prototype you should see that build starting:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},"#######################################################\n#\n# Starting Docker build for:\n#   alpine:3.16\n#\n#######################################################\n...\n")),(0,r.kt)("p",null,"Do note that the build pipeline prototype will not actually build the docker image,\nbut instead download it from Docker Hub."),(0,r.kt)("p",null,"Once the build has finished, the status request from the Pyrsia node will contain:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'DEBUG pyrsia::build_service::event   > Handle BuildEvent: Result\n{\n   "build_id":"c9ca3e57-aa84-4fab-a8be-381ab31e4916",\n   "build_trigger":"FromSource",\n   "build_result":"BuildResult"{\n      "package_type":"Docker",\n      "package_specific_id":"alpine:3.16",\n      "artifacts":[\n         "BuildResultArtifact"{\n            "artifact_specific_id":"alpine:3.16",\n            "artifact_location":"/private/tmp/pyrsia/builds/c9ca3e57-aa84-4fab-a8be-381ab31e4916/1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870",\n            "artifact_hash":"1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870"\n         },\n         "BuildResultArtifact"{\n            "artifact_specific_id":"alpine@sha256:1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870",\n            "artifact_location":"/private/tmp/pyrsia/builds/c9ca3e57-aa84-4fab-a8be-381ab31e4916/1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870",\n            "artifact_hash":"1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870"\n         },\n         "BuildResultArtifact"{\n            "artifact_specific_id":"alpine@sha256:213ec9aee27d8be045c6a92b7eac22c9a64b44558193775a1a7f626352392b49",\n            "artifact_location":"/private/tmp/pyrsia/builds/c9ca3e57-aa84-4fab-a8be-381ab31e4916/213ec9aee27d8be045c6a92b7eac22c9a64b44558193775a1a7f626352392b49",\n            "artifact_hash":"213ec9aee27d8be045c6a92b7eac22c9a64b44558193775a1a7f626352392b49"\n         },\n         "BuildResultArtifact"{\n            "artifact_specific_id":"alpine@sha256:9c6f0724472873bb50a2ae67a9e7adcb57673a183cea8b06eb778dca859181b5",\n            "artifact_location":"/private/tmp/pyrsia/builds/c9ca3e57-aa84-4fab-a8be-381ab31e4916/9c6f0724472873bb50a2ae67a9e7adcb57673a183cea8b06eb778dca859181b5",\n            "artifact_hash":"9c6f0724472873bb50a2ae67a9e7adcb57673a183cea8b06eb778dca859181b5"\n         }\n      ]\n   }\n}\nINFO  pyrsia::artifact_service::service > Build with ID c9ca3e57-aa84-4fab-a8be-381ab31e4916 completed successfully for package type Docker and package specific ID alpine:3.16\n')),(0,r.kt)("h2",{id:"try-to-reach-consensus-with-the-other-authorized-nodes"},"Try to reach consensus with the other authorized nodes"),(0,r.kt)("p",null,"Pyrsia node A will now try to reach consensus with the\nother authorized nodes, but since we are only running one authorized node, this\nstep is implicit and node A will continue with the next steps: creating and\ndistributing the new transparency log."),(0,r.kt)("h2",{id:"create-a-transparency-log-about-the-artifact-publication"},"Create a transparency log about the artifact publication"),(0,r.kt)("p",null,"When consensus has been reached, a transparency log is created for each built artifact."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'INFO  pyrsia::artifact_service::service > Adding artifact to transparency log: AddArtifactRequest { package_type: Docker, package_specific_id: "alpine:3.16", num_artifacts: 4, package_specific_artifact_id: "alpine:3.16", artifact_hash: "1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870" }\npyrsia::transparency_log::log     > Transparency log inserted into database with id: cc3dec20-8604-4d0a-8c18-ccb746769696\nINFO  pyrsia::artifact_service::service > Transparency Log for build with ID c9ca3e57-aa84-4fab-a8be-381ab31e4916 successfully added. Adding artifact locally: TransparencyLog { id: "cc3dec20-8604-4d0a-8c18-ccb746769696", package_type: Docker, package_specific_id: "alpine:3.16", num_artifacts: 4, package_specific_artifact_id: "alpine:3.16", artifact_hash: "1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870", source_hash: "", artifact_id: "75c7bd83-1dd4-4666-a35f-e8c59b695e21", source_id: "7ec06216-b2dc-4e5a-a90d-7875fb77b846", timestamp: 1660906467, operation: AddArtifact, node_id: "64765410-136b-4332-a837-226bd062ba37", node_public_key: "558b0373-a29d-40c9-8125-019fb74dda31" }\n')),(0,r.kt)("p",null,"Example for ",(0,r.kt)("inlineCode",{parentName:"p"},"alpine:3.16"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'{\n   "id":"cc3dec20-8604-4d0a-8c18-ccb746769696",\n   "package_type":"Docker",\n   "package_specific_id":"alpine:3.16",\n   "num_artifacts":4,\n   "package_specific_artifact_id":"alpine:3.16",\n   "artifact_hash":"1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870",\n   "source_hash":"",\n   "artifact_id":"75c7bd83-1dd4-4666-a35f-e8c59b695e21",\n   "source_id":"7ec06216-b2dc-4e5a-a90d-7875fb77b846",\n   "timestamp":1660906467,\n   "operation":"AddArtifact",\n   "node_id":"64765410-136b-4332-a837-226bd062ba37",\n   "node_public_key":"558b0373-a29d-40c9-8125-019fb74dda31"\n}\n')),(0,r.kt)("h2",{id:"publish-the-artifact-on-the-p2p-network"},"Publish the artifact on the p2p network"),(0,r.kt)("p",null,"As a final step in the build from source scenario, the artifacts are stored locally\non node A and provided on the p2p network."),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},' INFO  pyrsia::artifact_service::service > put_artifact with id: da341557-9150-4208-9474-f5884f799338\n INFO  pyrsia::artifact_service::storage > An artifact is being pushed to the artifact manager da341557-9150-4208-9474-f5884f799338\n DEBUG pyrsia::network::client           > p2p::Client::provide "da341557-9150-4208-9474-f5884f799338"\n')),(0,r.kt)("p",null,"Now we are ready to use the published artifacts in our build workflow on node B\nas shown in the sample section below."),(0,r.kt)("h2",{id:"use-pyrsia-with-docker-pull"},"Use Pyrsia with Docker pull"),(0,r.kt)("p",null,"Now that we have a Pyrsia network including a published Docker image, we can start\nusing Pyrsia with Docker."),(0,r.kt)("h3",{id:"configure-docker-desktop-to-use-node-b-as-registry-mirror"},"Configure Docker desktop to use node B as registry mirror"),(0,r.kt)("p",null,"On Windows or MacOS, open your Docker desktop installation -> Settings ->\nDocker Engine where Docker allows you to set registry-mirrors. Configure node B\nas a registry mirror by adding/editing the following in the configuration:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-jsonc"},' "registry-mirrors": [\n   "http://192.168.0.110:7888" // (IP address of host machine and port number of your Pyrsia node)\n ]\n')),(0,r.kt)("p",null,"On Linux, you'll find this configuration in the file ",(0,r.kt)("inlineCode",{parentName:"p"},"/etc/docker/daemon.json"),"."),(0,r.kt)("p",null,"On MacOS or Windows, you can't specify ",(0,r.kt)("inlineCode",{parentName:"p"},"localhost")," because the request will\noriginate from the Docker Desktop VM, so you will need to specify the IP\naddress of host machine. On Linux you can use localhost."),(0,r.kt)("p",null,"You will need to restart Docker Desktop. Once restarted you should be able to\npull Docker images through Pyrsia."),(0,r.kt)("h2",{id:"pull-alpine-docker-image"},"Pull ",(0,r.kt)("inlineCode",{parentName:"h2"},"alpine")," docker image"),(0,r.kt)("p",null,"First make sure Alpine is not in local Docker cache, then pull Alpine:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"docker rmi alpine:3.16.0 # remove alpine from local docker cache\ndocker pull alpine:3.16.0\n")),(0,r.kt)("p",null,"You'll see this in the Pyrsia logs of node B:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'INFO  pyrsia_registry                      > 192.168.0.227:60446 "GET /v2/ HTTP/1.1" 200 "-" "docker/20.10.17 go/go1.17.11 git-commit/a89b842 kernel/5.10.124-linuxkit os/linux arch/arm64 UpstreamClient(Docker-Client/20.10.17-rd \\(darwin\\))" 259.375\xb5s\nDEBUG pyrsia::docker::v2::handlers::manifests > Fetching manifest for alpine with tag: 3.16\nINFO  pyrsia::artifact_service::storage       > An artifact is being pulled from the artifact manager f6e32438-b23d-47be-908b-b6b97901a724\nDEBUG pyrsia::network::client                 > p2p::Client::list_providers "f6e32438-b23d-47be-908b-b6b97901a724"\nDEBUG pyrsia::network::event_loop             > Local Peer 12D3KooWNVVUAbLQnBWHvRS4Ad4aWpZyUTZMN5126KTgyYcubtpB is dialing Peer 12D3KooWHZRXJTjvYfP5A34bRLmeg9xmDFm46LUQJHHnhmemoUf6...\nDEBUG pyrsia::network::client                 > p2p::Client::get_idle_peer() entered with 1 peers\nDEBUG pyrsia::network::idle_metric_protocol   > p2p::idle_metric_protocol::write_request writing a request to peer for and idle metric\nDEBUG pyrsia::network::idle_metric_protocol   > p2p::idle_metric_protocol::read_response Reading response to idle metric request with value =[150, 62, 178, 249, 43, 85, 23, 66]\nDEBUG pyrsia::network::client                 > p2p::Client::get_idle_peer() Pushing idle peer with value 25053298284.56112\nDEBUG pyrsia::network::client                 > p2p::Client::request_artifact PeerId("12D3KooWHZRXJTjvYfP5A34bRLmeg9xmDFm46LUQJHHnhmemoUf6"): "f6e32438-b23d-47be-908b-b6b97901a724"\nDEBUG pyrsia::network::artifact_protocol      > Write ArtifactRequest: "f6e32438-b23d-47be-908b-b6b97901a724"\nINFO  pyrsia::artifact_service::service       > put_artifact with id: f6e32438-b23d-47be-908b-b6b97901a724\nINFO  pyrsia::artifact_service::storage       > An artifact is being pushed to the artifact manager f6e32438-b23d-47be-908b-b6b97901a724\n')),(0,r.kt)("p",null,"Indicating that the Alpine image was first pulled from the Pyrsia network and then\nstored locally, so node B can now also participate in the p2p content distribution."),(0,r.kt)("h2",{id:"inspect-the-transparency-logs"},"Inspect the transparency logs"),(0,r.kt)("p",null,"The transparency logs that were created as part of the build from source process,\ncan be inspected using the Pyrsia CLI on any node. You can change the CLI config\nto use the default port 7888 again to inspect the logs on node B, or you can run\ninspect-log without any changes to inspect the logs on node A:"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-sh"},"./pyrsia inspect-log docker --image alpine:3.16.0\n")),(0,r.kt)("p",null,"This CLI command returns the transparency logs for all the Pyrsia artifacts that\nmake up the Docker image ",(0,r.kt)("inlineCode",{parentName:"p"},"alpine:3.16"),":"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-text"},'[\n  {\n    "id": "cc3dec20-8604-4d0a-8c18-ccb746769696",\n    "package_type": "Docker",\n    "package_specific_id": "alpine:3.16",\n    "num_artifacts": 4,\n    "package_specific_artifact_id": "alpine:3.16",\n    "artifact_hash": "1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870",\n    "source_hash": "",\n    "artifact_id": "75c7bd83-1dd4-4666-a35f-e8c59b695e21",\n    "source_id": "7ec06216-b2dc-4e5a-a90d-7875fb77b846",\n    "timestamp": 1660906467,\n    "operation": "AddArtifact",\n    "node_id": "64765410-136b-4332-a837-226bd062ba37",\n    "node_public_key": "558b0373-a29d-40c9-8125-019fb74dda31"\n  },\n  {\n    "id": "d88982b1-261b-4e3d-9eb2-dd549c40ac05",\n    "package_type": "Docker",\n    "package_specific_id": "alpine:3.16",\n    "num_artifacts": 4,\n    "package_specific_artifact_id": "alpine@sha256:1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870",\n    "artifact_hash": "1304f174557314a7ed9eddb4eab12fed12cb0cd9809e4c28f29af86979a3c870",\n    "source_hash": "",\n    "artifact_id": "f2648155-b665-4567-9e3c-27af7cc3b9bb",\n    "source_id": "0ca693f9-7c50-4448-9cd6-0d7a145fba14",\n    "timestamp": 1660906529,\n    "operation": "AddArtifact",\n    "node_id": "60b7d9ae-d5ba-4440-ab83-6c5638a18a45",\n    "node_public_key": "4a873a2a-0e04-4540-b1bd-bccc0d721ed2"\n  },\n  {\n    "id": "f53f9cc6-6998-470a-8094-cae3fbc82412",\n    "package_type": "Docker",\n    "package_specific_id": "alpine:3.16",\n    "num_artifacts": 4,\n    "package_specific_artifact_id": "alpine@sha256:213ec9aee27d8be045c6a92b7eac22c9a64b44558193775a1a7f626352392b49",\n    "artifact_hash": "213ec9aee27d8be045c6a92b7eac22c9a64b44558193775a1a7f626352392b49",\n    "source_hash": "",\n    "artifact_id": "dac2e42c-fd48-4487-b48c-34f5eac1f674",\n    "source_id": "eed938e9-9cf8-4e1b-995f-6a6d1da6ef26",\n    "timestamp": 1660906589,\n    "operation": "AddArtifact",\n    "node_id": "1e3244e3-1fc5-429b-8cc6-43dbbebaccb2",\n    "node_public_key": "7d7d96c0-1b8b-4028-bb20-df9a45eeaa7f"\n  },\n  {\n    "id": "cae2f5a7-22ec-4d22-86af-59e1f0239056",\n    "package_type": "Docker",\n    "package_specific_id": "alpine:3.16",\n    "num_artifacts": 4,\n    "package_specific_artifact_id": "alpine@sha256:9c6f0724472873bb50a2ae67a9e7adcb57673a183cea8b06eb778dca859181b5",\n    "artifact_hash": "9c6f0724472873bb50a2ae67a9e7adcb57673a183cea8b06eb778dca859181b5",\n    "source_hash": "",\n    "artifact_id": "3fc0ac72-8f5e-41fe-8ab6-94c565ebc52c",\n    "source_id": "4cb49c33-af4c-4c3a-8053-b771007a6720",\n    "timestamp": 1660906649,\n    "operation": "AddArtifact",\n    "node_id": "64d30c8e-d356-420c-ab87-e27687ca6f1d",\n    "node_public_key": "57130e5d-d0dc-450b-b80d-966cb71210ef"\n  }\n]\n')))}b.isMDXComponent=!0},11748:function(e,a,t){var n={"./locale":89234,"./locale.js":89234};function i(e){var a=r(e);return t(a)}function r(e){if(!t.o(n,e)){var a=new Error("Cannot find module '"+e+"'");throw a.code="MODULE_NOT_FOUND",a}return n[e]}i.keys=function(){return Object.keys(n)},i.resolve=r,e.exports=i,i.id=11748}}]);